import pygame, sys, random
import time

def draw_floor():
    screen.blit(floor_surface, (floor_x_pos,450))
    screen.blit(floor_surface, (floor_x_pos + 288,450))

def create_pipe():
    random_pipe_pos = random.choice(pipe_height)
    bottom_pipe = pipe_surface.get_rect(midtop = (350, random_pipe_pos))
    top_pipe = pipe_surface.get_rect(midbottom = (350, random_pipe_pos - 150))
    return bottom_pipe, top_pipe

def move_pipes(pipes):
    for pipe in pipes:
        pipe.centerx -= 2
    return pipes

def draw_pipes(pipes):
    for pipe in pipes:
        if pipe.bottom >= 512:
            screen.blit(pipe_surface, pipe)
        else:
            flip_pipe = pygame.transform.flip(pipe_surface, False, True)
            screen.blit(flip_pipe, pipe)

def check_collision(pipes):
    for pipe in pipes:
        if bird_rect.colliderect(pipe):
            death_sound.play()
            time.sleep(0.5)
            return False

    if bird_rect.top <= -100:
        time.sleep(0.5)
        return False
    
    if bird_rect.bottom >= 450:
        death_sound.play()
        time.sleep(0.5)
        return False
    
    return True

def rotate_bird(bird):
    new_bird = pygame.transform.rotozoom(bird, -bird_movement * 3,1)
    return new_bird

def bird_animation():
    new_bird = bird_frames[bird_index]
    new_bird_rect = new_bird.get_rect(center = (100, bird_rect.centery))
    return new_bird, new_bird_rect

def score_display(game_state):
    if game_state == 'main_game':
        score_surface = game_font.render(str(int(score)), True, (255,255,255))
        score_rect = score_surface.get_rect(center = (144, 50))
        screen.blit(score_surface, score_rect)
    
    if game_state == 'game_over':
        score_surface = game_font.render('Score: ' + str(int(score)), True, (255,255,255))
        score_rect = score_surface.get_rect(center = (144, 50))
        screen.blit(score_surface, score_rect)

        high_score_surface = game_font.render('High Score: ' + (str(int(high_score))), True, (255,255,255))
        high_score_rect = high_score_surface.get_rect(center = (144, 415))
        screen.blit(high_score_surface, high_score_rect)

def update_score(score, high_score):
    if score > high_score:
        high_score = score
    return high_score

def bird_colour():
    birdcolour_surface = game_font.render('Choose a colour:', True, (255,255,255))
    birdcolour_rect = birdcolour_surface.get_rect(center = (144, 100))
    screen.blit(birdcolour_surface, birdcolour_rect)

def colour_choice(colour_bird):
    if colour_bird == 'blue':
        bird_downflap = pygame.image.load('flappy_bird_work/images/bluebird-downflap.png').convert_alpha()
        bird_midflap = pygame.image.load('flappy_bird_work/images/bluebird-midflap.png').convert_alpha()
        bird_upflag = pygame.image.load('flappy_bird_work/images/bluebird-upflap.png').convert_alpha()

    if colour_bird == 'red':
        bird_downflap = pygame.image.load('flappy_bird_work/images/redbird-downflap.png').convert_alpha()
        bird_midflap = pygame.image.load('flappy_bird_work/images/redbird-midflap.png').convert_alpha()
        bird_upflag = pygame.image.load('flappy_bird_work/images/redbird-upflap.png').convert_alpha()

    if colour_bird == 'yellow':
        bird_downflap = pygame.image.load('flappy_bird_work/images/yellowbird-downflap.png').convert_alpha()
        bird_midflap = pygame.image.load('flappy_bird_work/images/yellowbird-midflap.png').convert_alpha()
        bird_upflag = pygame.image.load('flappy_bird_work/images/yellowbird-upflap.png').convert_alpha()    

    bird_frames = [bird_downflap, bird_midflap, bird_upflag]
    return bird_frames

def colour_choicePILLAR(colour_pillar):
    if colour_pillar == 'green':
        pillar_surface = pygame.image.load('flappy_bird_work/images/pipe-green.png')

    elif colour_pillar == 'red':
        pillar_surface = pygame.image.load('flappy_bird_work/images/pipe-red.png')
    
    return pillar_surface

def pillar_colour():
    pillarcolour_surface = game_font.render('Choose a colour:', True, (255,255,255))
    pillarcolour_rect = pillarcolour_surface.get_rect(center = (144, 100))
    screen.blit(pillarcolour_surface, pillarcolour_rect)
    

# initialise the pygame
# pygame.mixer.pre_init(frequency = 44100, size = 16, channels = 1, buffer = 512)
pygame.init()


#creating the screen (width by height)
screen = pygame.display.set_mode((288, 512))

# creates clock
clock = pygame.time.Clock()

# font - score
game_font = pygame.font.Font('flappy_bird_work/04B_19.ttf', 20)
button_font = pygame.font.Font('flappy_bird_work/04B_19.ttf', 10)

# Game variable
gravity = 0.13
bird_movement = 0
game_active = False
score = 0 
high_score = 0 

# background surface
bg_surfaceDAY = pygame.image.load('flappy_bird_work/images/background-day.png').convert() #converts helps move pygame quicker
bg_surfaceNIGHT = pygame.image.load('flappy_bird_work/images/background-night.png').convert()

bg_surfaceLIST = []
bg_surfaceLIST.append(pygame.image.load('flappy_bird_work/images/background-day-0.png').convert())
bg_surfaceLIST.append(pygame.image.load('flappy_bird_work/images/background-day-1.png').convert())
bg_surfaceLIST.append(pygame.image.load('flappy_bird_work/images/background-day-2.png').convert())
bg_surfaceLIST.append(pygame.image.load('flappy_bird_work/images/background-day-3.png').convert())
bg_surfaceLIST.append(pygame.image.load('flappy_bird_work/images/background-day-4.png').convert())
bg_surfaceLIST.append(pygame.image.load('flappy_bird_work/images/background-day-5.png').convert())
bg_surfaceLIST.append(pygame.image.load('flappy_bird_work/images/background-day-6.png').convert())
bg_surfaceLIST.append(pygame.image.load('flappy_bird_work/images/background-day-7.png').convert())
bg_surfaceLIST.append(pygame.image.load('flappy_bird_work/images/background-day-8.png').convert())
bg_surfaceLIST.append(pygame.image.load('flappy_bird_work/images/background-day-9.png').convert())
bg_surfaceLIST.append(pygame.image.load('flappy_bird_work/images/background-day-10.png').convert())

#bg_surface = pygame.transform.scale2x(bg_surface) # doubles size of image

floor_surface = pygame.image.load('flappy_bird_work/images/base.png').convert()
#floor_surface = pygame.transform.scale2x(floor_surface)
floor_x_pos = 0


# drawing bird
bird_downflap = pygame.image.load('flappy_bird_work/images/bluebird-downflap.png').convert_alpha()
bird_midflap = pygame.image.load('flappy_bird_work/images/bluebird-midflap.png').convert_alpha()
bird_upflag = pygame.image.load('flappy_bird_work/images/bluebird-upflap.png').convert_alpha()


bird_frames = [bird_downflap, bird_midflap, bird_upflag]
bird_index = 0
bird_surface = bird_frames[bird_index]
bird_rect = bird_surface.get_rect(center = (100, 256))

BIRDFLAP = pygame.USEREVENT + 1
pygame.time.set_timer(BIRDFLAP,200)



# beginning screen - bird choices
bluebird = pygame.image.load('flappy_bird_work/images/bluebird-midflap.png').convert_alpha()
bluebird_rect = bluebird.get_rect(center = (72, 200))

redbird = pygame.image.load('flappy_bird_work/images/redbird-midflap.png').convert_alpha()
redbird_rect = redbird.get_rect(center = (144, 200))

yellowbird = pygame.image.load('flappy_bird_work/images/yellowbird-midflap.png').convert_alpha()
yellowbird_rect = yellowbird.get_rect(center = (216, 200))


greenpillar = pygame.image.load('flappy_bird_work/images/pipe-green-small.png').convert_alpha()
greenpillar_rect = greenpillar.get_rect(center = (86, 200))

redpillar = pygame.image.load('flappy_bird_work/images/pipe-red-small.png').convert_alpha()
redpillar_rect = redpillar.get_rect(center = (207, 200))

CHOOSE_BIRD_COLOUR = False
CHOOSE_PILLAR_COLOUR = False

#bird_surface = pygame.image.load('flappy_bird_work/images/bluebird-midflap.png').convert_alpha()
#bird_surface = pygame.transform.scale2x(bird_surface)
# puts rectangle around bird
#bird_rect = bird_surface.get_rect(center = (100, 256))


# drawing pipes
pipe_surface = pygame.image.load('flappy_bird_work/images/pipe-green.png')
#pipe_surface = pygame.transform.scale2x(pipe_surface)
pipe_list = []
SPAWNPIPE = pygame.USEREVENT
pygame.time.set_timer(SPAWNPIPE, 1400) #event will be triggered every 1.2 seconds
pipe_height = [200, 300, 400]
pipe_count = 0

# Screen Buttons 
bird_button = pygame.image.load('flappy_bird_work/images/bluebird-midflap.png').convert_alpha()
bird_button_rect = bird_button.get_rect(center = (260, 25))

pipe_button = pygame.image.load('flappy_bird_work/images/pipe-green-small.png').convert_alpha()
pipe_button = pygame.transform.scale(pipe_button, (26, 31))
pipe_button_rect = pipe_button.get_rect(center = (30, 27))



game_over_surface = pygame.image.load('flappy_bird_work/images/message.png').convert_alpha()
game_over_rect = game_over_surface.get_rect(center = (144, 256))


flap_sound = pygame.mixer.Sound('flappy_bird_work/sound_sfx_wing.wav')
death_sound = pygame.mixer.Sound('flappy_bird_work/sound_sfx_hit.wav')
score_sound = pygame.mixer.Sound('flappy_bird_work/sound_sfx_point.wav')

background = 0

while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit() # shuts down game completely
        
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_SPACE and game_active:
                bird_movement = 0
                bird_movement -= 4 # allows bird to jump
                flap_sound.play()
            if event.key == pygame.K_SPACE and game_active == False and CHOOSE_BIRD_COLOUR == False and CHOOSE_PILLAR_COLOUR == False:
                already_played  = True
                game_active = True
                pipe_list.clear()
                bird_rect.center = (100, 256)
                bird_movement = 0
                score = 0
                pipe_count = 0
        
        if event.type == pygame.MOUSEBUTTONUP and game_active == False:
            x,y = pygame.mouse.get_pos()
            if x > 243 and x < 277 and y > 13 and y < 37:
                CHOOSE_BIRD_COLOUR = True
            if x > 17 and x < 43 and y > 12 and y < 42:
                CHOOSE_PILLAR_COLOUR = True


        if event.type == pygame.MOUSEBUTTONUP and game_active == False and CHOOSE_BIRD_COLOUR == True:
            x,y = pygame.mouse.get_pos()
            if x > 56 and x < 88 and y > 184 and y < 216:
                colour_bird = 'blue'
                bird_frames = colour_choice('blue')
                CHOOSE_BIRD_COLOUR = False
            
            if x > 128 and x < 160 and y > 184 and y < 216:
                colour_bird = 'red'
                bird_frames = colour_choice('red')
                CHOOSE_BIRD_COLOUR = False
            
            if x > 200 and x < 232 and y > 184 and y < 216:
                colour_bird = 'yellow'
                bird_frames = colour_choice('yellow')
                CHOOSE_BIRD_COLOUR = False


        if event.type == pygame.MOUSEBUTTONUP and game_active == False and CHOOSE_PILLAR_COLOUR == True:
            x,y = pygame.mouse.get_pos()
            if x > 73 and x < 99 and y > 184 and y < 216:
                colour_pillar = 'green'
                pipe_surface = colour_choicePILLAR(colour_pillar)
                CHOOSE_PILLAR_COLOUR = False
            
            if x > 194 and x < 214 and y > 184 and y < 216:
                colour_pillar = 'red'
                pipe_surface = colour_choicePILLAR(colour_pillar)
                CHOOSE_PILLAR_COLOUR = False
            

                 
        if event.type == SPAWNPIPE:
            pipe_list.extend(create_pipe())
        
        if event.type == BIRDFLAP:
            if bird_index < 2:
                bird_index += 1
            else:
                bird_index = 0
            
            bird_surface, bird_rect = bird_animation()
                

    # image of player 1
    # background image

    if score <= 5:
        screen.blit(bg_surfaceDAY, (0,0))

    if score > 5:
        screen.blit(bg_surfaceLIST[int(background)], (0,0))
    
    if background < 10:
        background += 0.01


    if game_active: 

        # Bird
        bird_movement += gravity
        rotated_bird = rotate_bird(bird_surface)
        bird_rect.centery += bird_movement
        screen.blit(rotated_bird,bird_rect) #draws bird - check bird for image
        game_active = check_collision(pipe_list)


        # Pipes
        pipe_list = move_pipes(pipe_list)
        draw_pipes(pipe_list)


        if len(pipe_list) > pipe_count:
            if pipe_list[pipe_count][0] <= 100:
                score += 0.5
                pipe_count += 1
                score_sound.play()

        score_display('main_game')

    else:
        if CHOOSE_BIRD_COLOUR == False and CHOOSE_PILLAR_COLOUR == False:
            background = 0
            screen.blit(game_over_surface, game_over_rect)
            screen.blit(bird_button, bird_button_rect)
            screen.blit(pipe_button, pipe_button_rect)
            high_score = update_score(score, high_score)
            score_display('game_over')

        if CHOOSE_BIRD_COLOUR == True:
            bird_colour()
            screen.blit(bluebird, bluebird_rect)
            screen.blit(redbird, redbird_rect)
            screen.blit(yellowbird, yellowbird_rect)
        
        if CHOOSE_PILLAR_COLOUR == True:
            pillar_colour()
            screen.blit(greenpillar, greenpillar_rect)
            screen.blit(redpillar, redpillar_rect)




    # Floor
    floor_x_pos -= 1
    draw_floor()
    if floor_x_pos <= -288: # ensures floorboard moves
        floor_x_pos = 0


    pygame.display.update()
    clock.tick(120) # frame rate - can run slower than this
