import pygame
import math
import random
from pygame import mixer

# initialise the pygame
pygame.init()

left_down=False
right_down=False
#creating the screen (width by height)
screen = pygame.display.set_mode((800,600))

# Background image (from freepiks)
background = pygame.image.load('background.png') 


# Background sound
mixer.music.load('background.wav')
mixer.music.play(-1)

# Caption and Icon
pygame.display.set_caption('Space Icon')
icon = pygame.image.load('ufo.png')
pygame.display.set_icon(icon) #32 pixels - png - flaticons

# Player
player1 = pygame.image.load('spaceship-mc.png')
playerX = 370
playerY = 480
playerX_change = 0
playerY_change = 0

# Enemy
enemy1 = []
enemyX = [] 
enemyY = []
enemyX_change = []
enemyY_change = []
num_of_enemies = 6

for i in range(num_of_enemies):
    enemy1.append(pygame.image.load('alien.png'))
    enemyX.append(random.randint(0, 735))
    enemyY.append(random.randint(50,150))
    enemyX_change.append(4)
    enemyY_change.append(40)


# Clock
clock = pygame.time.Clock()

# Bullet
airbullet_image = []
airbullet_x = []
airbullet_y = []


bulletX_change = 0
bulletY_change = 20
able_to_bullet = True

# Number of bullets
num_bullets = 30
font = pygame.font.Font('freesansbold.ttf', 32)

BtextX = 380
BtextY = 10


# explosion
explosion = []
num_explosion = 1

for i in range(1,6):
    explosion.append(pygame.image.load('explosion-%d.png' %i))

exploding_enemyX = 0
exploding_enemyY = 0


# Score
score_value = 0
font = pygame.font.Font('freesansbold.ttf', 32)

textX = 10
textY = 10


# Game over text
over_font = pygame.font.Font('freesansbold.ttf', 64)


def show_num_bullets(x,y):
    bullets = font.render('Number of Bullets Left: ' + str(int(num_bullets)), True, (255, 255, 255))
    screen.blit(bullets, (x, y))

def show_score(x,y):
    score =  font.render('Score: ' + str(int(score_value)), True, (255, 255, 255))
    screen.blit(score, (x, y))

def game_over_text():
    over_text =  over_font.render('GAME OVER', True, (255, 255, 255))
    screen.blit(over_text, (200, 250))


def player(x,y): 
    screen.blit(player1, (x, y)) # draws player

def enemy(x,y,i): 
    screen.blit(enemy1[i], (x, y)) # draws enemy

def fire_bullet(imag, x, y): 
    screen.blit(imag, (x + 16, y + 12)) # ensures on middle of spaceship

def explosion_animation(image, x, y):
    screen.blit(image, (x,y))

def isCollision(enemyX, enemyY, airbullet_x, airbullet_y):
    distance = math.sqrt((math.pow(enemyX-airbullet_x, 2)) + (math.pow(enemyY-airbullet_y, 2)))
    if distance < 27:
        return True
    else:
        return False


# Game Loop
running = True
while running:
    #0-255 each one is RGB - gives color to screen
    screen.fill((60,60,90))

    # Background
    screen.blit(background, (0,0))

    for event in pygame.event.get(): #includes all events
        if event.type == pygame.QUIT:
            running = False #quits game
        
        # if keystroke is pressed check whether its right or left
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_LEFT:
                playerX_change = -10
                left_down=True
            if event.key == pygame.K_RIGHT:
                playerX_change = 10
                right_down=True

            if able_to_bullet:
                if event.key == pygame.K_SPACE:
                    if num_bullets > 0:
                        num_bullets -= 1
                    bullet_sound = mixer.Sound('laser.wav')
                    bullet_sound.play()
                    #Gets current x coordinate of the spaceship
                    airbullet_image.append(pygame.image.load('bullet.png'))
                    airbullet_x.append(playerX)
                    airbullet_y.append(480)
                    fire_bullet(airbullet_image[0], airbullet_x[0], airbullet_y[0])

        if event.type == pygame.KEYUP:
            if event.key == pygame.K_LEFT: 
                if not right_down:
                    playerX_change = 0
                left_down=False

            if event.key == pygame.K_RIGHT:
                if not left_down:
                    playerX_change = 0
                right_down=False
    



    #creates boundary for player1
    playerX += playerX_change
    if playerX <= 0:
        playerX = 0
    elif playerX >= 736:
        playerX = 736

    #creates movement for enemy1
    for i in range(num_of_enemies):

        #game over
        if enemyY[i] > 440:
            for j in range(num_of_enemies):
                enemyY[j] = 2000
            able_to_bullet = False
            game_over_text()
            break

        if num_bullets == 0:
            for j in range(num_of_enemies):
                enemyY[j] = 2000
            able_to_bullet = False
            game_over_text()
            break



        enemyX[i] += enemyX_change[i]

        if enemyX[i] <= 0:
            enemyX_change[i] = 7
            enemyY[i] += enemyY_change[i]
        elif enemyX[i] >= 736:
            enemyX_change[i] = -7
            enemyY[i] += enemyY_change[i] 

        length = len(airbullet_y)

        #Collision
        for j in range(length):
            collision = isCollision(enemyX[i], enemyY[i], airbullet_x[j], airbullet_y[j])
            x = airbullet_x[j]
            y = airbullet_y[j]
            image = airbullet_image[j]
            if collision:
                collision_sound = mixer.Sound('explosion.wav')
                collision_sound.play()

                if num_explosion == 1:
                    explosion_animation(explosion[0], enemyX[i]+24, enemyY[i]+24)
                    num_explosion += 1

                
                exploding_enemyX = enemyX[i]
                exploding_enemyY = enemyY[i]

                airbullet_image.remove(image)
                airbullet_x.remove(x)
                airbullet_y.remove(y)
                score_value += 1
                enemyX[i] = random.randint(0, 735)
                enemyY[i] = random.randint(50,150)
                length = len(airbullet_y)
                break
                

        
        enemy(enemyX[i], enemyY[i], i)

    # bullet movement
    if len(airbullet_image) > 0:
        for i in range(length):
            fire_bullet(airbullet_image[i], airbullet_x[i], airbullet_y[i])
            airbullet_y[i] -= bulletY_change

    for y in list(airbullet_y):
        if y <= 0: #top of screen
            airbullet_image = airbullet_image[1:]
            airbullet_x = airbullet_x[1:]
            airbullet_y = airbullet_y[1:]
    
    if num_explosion == 2:
        explosion_animation(explosion[1], exploding_enemyX+20, exploding_enemyY+20)
        
    elif num_explosion == 3:
        explosion_animation(explosion[2], exploding_enemyX+16, exploding_enemyY+16)
    elif num_explosion == 4:
        explosion_animation(explosion[3], exploding_enemyX, exploding_enemyY)
    elif num_explosion == 5:
        explosion_animation(explosion[4], exploding_enemyX-32, exploding_enemyY-32)
    
    if num_explosion > 1:
        num_explosion += 1

                
    if num_explosion == 5:
        num_explosion = 1
    
    # draws player
    player(playerX, playerY)
    
    #draws score
    show_score(textX, textY)

    # shows number of bullets
    show_num_bullets(BtextX, BtextY)

    #update screen
    pygame.display.update()
